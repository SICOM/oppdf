/*
 * DO NOT EDIT THIS FILE - it is generated by Glade.
 */

#include <sys/time.h>
#include <poppler/glib/poppler.h>

/*
 * Define it as 1 if you want an iconview and a dynamically sized
 * GtkHPaned. Unfortunately, resizing the panels sometimes make
 * the viewport of the image go into an infinite loop of expose
 * events with inconsistent width and height values. If this happens,
 * the oppdf-handler (started as a standalone app) resizes its window
 * until it fails to allocate its on-screen pixmap.
 *
 * Running it inside WebKit makes it look frozen because of the
 * infinite loop of expose events but the external browser window
 * doesn't change its size.
 */
#define ICONVIEW	0

/*
 * 0: use a GtkEventBox to catch events
 * 1: use a GtkViewport
 */
#define VIEWPORT	1

typedef struct {
	PopplerPage	*page;
	double		pw, ph;
	int		offset;

	GdkPixmap	*pixmap;	/* NULL if not rendered */
	int		img_w, img_h;	/* set after oppdf_compute_sizes() */
} oppdf_pages;

typedef struct {
	char		*pdf_buf;
	int		pdf_size;

	PopplerDocument	*doc;
	PopplerDest	*dest;
	oppdf_pages	*pages;
	int		n_pages;
	int		thumb_idx;
	int		current_page;
	int		fit_scale;
	int		continuous_mode;
	double		scale;
} oppdf_doc;

#define PDF_HANDLERS		(15)

typedef struct {
	/* main window and dimensions */
	GtkWidget	*window1;
	int		x, y, w, h, depth;
	int		cursor_set;

	/* temporary storage */
	int		usable_width;

	/* child widgets */
	GtkWidget	*container; /* toplevel GtkVBox or GtkTable */

	GtkWidget	*handler_hbox[PDF_HANDLERS];
	int		handler_hbox_added[PDF_HANDLERS];
	GtkWidget	*handlers[PDF_HANDLERS];
	int		handlers_shown;

	/* Handy copy of most certain handlers[i] values */
	GtkWidget	*firstpage_button;
	GtkWidget	*prevpage_button;
	GtkWidget	*nextpage_button;
	GtkWidget	*lastpage_button;
	GtkWidget	*page_spin;
	GtkWidget	*npages_label;
	GtkWidget	*scale_combo;
	GtkWidget	*print_button;
	GtkWidget	*email_button;
	GtkWidget	*find_entry;
	GtkWidget	*findprev_button;
	GtkWidget	*findnext_button;

	/* Other widgets in the window */
#if ICONVIEW
	GtkWidget	*hpaned;

	GtkWidget	*iconview_scroll;
	GtkWidget	*iconview;
	GtkListStore	*thumbs;
#endif

	GtkWidget	*table;
	GtkWidget	*hscrollbar;
	GtkAdjustment	*hadj;
	GtkWidget	*vscrollbar;
	GtkAdjustment	*vadj;
#if VIEWPORT
	GtkWidget	*viewport;
#else
	GtkWidget	*eventbox;
#endif
	GtkWidget	*image;

	/* PDF data */
	oppdf_doc	*doc_ptr;
	/* Image data and dimensions */
	GdkPixmap	*pixmap;
	int		img_w, img_h;
	int		virtual_w, virtual_h;
	int		hadj_val, vadj_val;

	/* For keeping track of dragging with cursor */
	int		image_drag;
	int		event_x_prev;
	int		event_y_prev;
	int		image_x_prev;
	int		image_y_prev;

	/* protection from multiple re-entry (ping-pong effect) */
	int		render_in_progress;
#if ICONVIEW
	int		iconview_change;
#endif

	/* Search facility */
	int		search_page;
	GList		*search_list;
	GList		*current_search;
	PopplerRectangle search_rect;
} pdf_browser_contents;

typedef struct {
	GtkWidget	*error;
	GtkWidget	*vbox;
	GtkWidget	*label;
	GtkWidget	*action_area;
	GtkWidget	*okbutton;
} error_dialog;

typedef struct {
	GtkWidget	*password;
	GtkWidget	*dialog_vbox2;
	GtkWidget	*hbox2;
	GtkWidget	*label4;
	GtkWidget	*entry1;
	GtkWidget	*dialog_action_area2;
	GtkWidget	*cancelbutton1;
	GtkWidget	*okbutton2;
} password_dialog;

enum {
	THUMB_LABEL,
	THUMB_ICON,
	N_THUMB
};

#define BESTFIT                 (-1)
#define FITPAGEWIDTH            (-2)

extern oppdf_doc * pdf_read(int size);
extern pdf_browser_contents* create_pdf_browser (GdkNativeWindow nw, oppdf_doc *doc_ptr);
extern void pdf_browser_display_data(pdf_browser_contents *ptr, char *url);
extern void destroy_pdf_browser(pdf_browser_contents *ptr);
extern void create_pdf_browser_contents(pdf_browser_contents *ptr);

extern error_dialog* create_error (void);
extern void destroy_error(error_dialog *dlg);

extern password_dialog *create_password (void);
extern void destroy_password(password_dialog *dlg);

GtkWidget* get_print_pages (void);

typedef struct {
	char	*str;
	int	value;
} scale;

extern scale	scales[13];

extern void oppdf_compute_scale(pdf_browser_contents *ptr);
extern void oppdf_compute_sizes(pdf_browser_contents *ptr);
extern void oppdf_set_scrollbars(pdf_browser_contents *ptr, double *h, double *v);
extern void oppdf_compute_selection(pdf_browser_contents *ptr, int page);
extern void oppdf_display(pdf_browser_contents *ptr);
extern void oppdf_render_single_page(pdf_browser_contents *ptr, int page);
extern int  oppdf_search_new(pdf_browser_contents *ptr, int start_page);
extern int  oppdf_search_next(pdf_browser_contents *ptr);
extern int  oppdf_search_new_prev(pdf_browser_contents *ptr, int start_page);
extern int  oppdf_search_prev(pdf_browser_contents *ptr);
extern void oppdf_search_free(pdf_browser_contents *ptr);
